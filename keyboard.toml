# Documentation: https://haobogu.github.io/rmk/keyboard_configuration.html
[keyboard]
name = "TK13"
product_name = "TK13"
vendor_id = 0x4c4b
product_id = 0x4643
manufacturer = "haobo"
chip = "nrf52840"  # Direct chip specification


[matrix]
# Input and output pins are mandatory
input_pins = ["P0_02", "P0_22", "P1_04", "P0_11"]
output_pins = ["P0_20", "P1_00", "P0_24", "P1_06"]
# WARNING: Currently row2col/col2row is set in RMK's feature gate, configs here do nothing actually
#row2col = true

[layout]
rows = 4
cols = 4
layers = 2

matrix_map = """
(0,0) (0,1) (0,2) (0,3) 
(1,0) (1,1) (1,2) (1,3) 
(2,0) (2,1) (2,2) (2,3) 
(3,0) (3,1) (3,2) (3,3) 
"""
# layer 0 (default):
# (the number comes from the order of '[[layer]] entries' in the file)
[[layer]]
name = "base_layer" #optional name for the layer
keys = """
MO(1) W ESC _  
A     S F   G  
Z     X D   Y 
_     _ C   SPACE  
"""

# layer 1:
[[layer]]
name = "fn_layer" #optional name for the layer
keys = """
_ BT0 BT1     _  
_ _   CLR_BT  Bootloader  
Z X     D     G 
_ _     C     _
"""

[[input_device.encoder]]
pin_a = "P0_29"
pin_b = "P0_31"

# Whether to use the MCU's internal pull-up resistor, default to false
internal_pullup = true

# Phase is the working mode of the rotary encoders.
# Available mode:
# - default: EC11 compatible, resolution = 1
# - e8h7: resolution = 2, reverse = true
# - resolution: customized resolution, the resolution value and reverse should be specified later
phase = "default"

# The resolution represents how many pulses the encoder generates per detent.
# For examples, if your rotary encoder has 30 detents in total and generates 15 pulses per 360 degree rotation, then the resolution = 30/15 = 2.
# Number of detents and number of pulses can be found in your encoder's datasheet
resolution = 2

# Whether the direction of the rotary encoder is reversed.
reverse = false

# Ble configuration
# To use the default configuration, ignore this section completely
[ble]
# Whether to enable BLE feature
enabled = true
# nRF52840's saadc pin for reading battery level, you can use a pin number or "vddh"
battery_adc_pin = "vddh"
# Or
# battery_adc_pin = "P0_04"
# The voltage divider setting for saadc, this setting should be ignored when using "vddh" as the adc pin.
# For example, nice!nano have 806 + 2M resistors, the saadc measures voltage on 2M resistor, so the two values should be set to 2000 and 2806



[light]
# All light pins are high-active by default, uncomment if you want it to be low-active
# capslock.pin = "PB2"
# capslock.low_active = false
# scrolllock.pin = "PA3"
# scrolllock.low_active = false
# Just ignore if no light pin is used for it
# numslock.pin = "PA5"
# numslock.low_active = false



[storage]
# Storage feature is enabled by default
# enabled = false
